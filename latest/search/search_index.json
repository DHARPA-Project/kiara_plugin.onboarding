{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"kiara plugin: onboarding","text":"<p>This package contains a set of commonly used/useful modules, pipelines, types and metadata schemas for Kiara.</p>"},{"location":"#description","title":"Description","text":"<p>kiara modules for data onboarding.</p>"},{"location":"#package-content","title":"Package content","text":""},{"location":"#module_types","title":"module_types","text":"<ul> <li><code>onboard.zenodo_record</code>: Download a dataset from zenodo.org.</li> </ul>"},{"location":"#operations","title":"operations","text":"<ul> <li><code>onboard.zenodo_record</code>: Download a dataset from zenodo.org.</li> </ul>"},{"location":"#links","title":"Links","text":"<ul> <li>Documentation: https://DHARPA-Project.github.io/kiara_plugin.onboarding</li> <li>Code: https://github.com/DHARPA-Project/kiara_plugin.onboarding</li> </ul>"},{"location":"SUMMARY/","title":"SUMMARY","text":"<ul> <li>Home</li> <li>Package contents</li> <li>Usage</li> <li>Development</li> <li>API reference</li> </ul>"},{"location":"development/","title":"Development","text":""},{"location":"development/#prepare-development-environment","title":"Prepare development environment","text":""},{"location":"development/#using-conda-recommended","title":"Using conda (recommended)","text":"<pre><code>conda create -n onboarding python=3.9\nconda activate onboarding\nconda install -c conda-forge mamba   # this is optional, but makes everything install related much faster, if you don't use it, replace 'mamba' with 'conda' below\nmamba install -c conda-forge -c dharpa kiara\nmamba install -c conda-forge -c dharpa kiara_plugin.core_types kiara_plugin.tabular   # optional, adjust which plugin packages you depend on, those two are quite common\n</code></pre>"},{"location":"development/#using-python-venv","title":"Using Python venv","text":"<p>Later, alligator.</p>"},{"location":"development/#check-out-the-source-code","title":"Check out the source code","text":"<p>First, fork the kiara_plugin.onboarding repository into your personal Github account.</p> <p>Then, use the resulting url (in my case: https://github.com/makkus/kiara_modules.onboarding.git) to clone the repository locally:</p> <pre><code>https://github.com/&lt;YOUR_FORKED_GITHUB_ID&gt;/kiara_plugin.onboarding\n</code></pre>"},{"location":"development/#install-the-kiara-plugin-package-into-it","title":"Install the kiara plugin package into it","text":"<pre><code>cd kiara_plugin.onboarding\npip install -e '.[all_dev]'\n</code></pre> <p>Here we use the <code>-e</code> option for the <code>pip install</code> command. This installs the local folder as a package in development mode into the current environment. Development mode makes it so that if you change any of the files in this folder, the Python environment will pick it up automatically, and whenever you run anything in this environment the latest version of your code/files are used.</p> <p>We also install a few additional requirements  (the <code>[all_dev]</code> part in the command above) that are not strictly necessary for <code>kiara</code> itself, or this package, but help with various development-related tasks.</p>"},{"location":"development/#install-some-pre-commit-check-tooling-optional","title":"Install some pre-commit check tooling (optional)","text":"<p>This step is optional, but helps with keeping the code clean and CI from failing. By installing pre-commit hooks like here, whenever you do a <code>git commit</code> in this repo, a series of checks and cleanup tasks are run, until everything is in a state that will hopefully make Github Actions not complain when you push your changes.</p> <pre><code>pre-commit install\npre-commit install --hook-type commit-msg\n</code></pre> <p>In addition to some Python-specific checks and cleanup tasks, this will also check your commit message so it's in line with the suggested format: https://www.conventionalcommits.org/en/v1.0.0/</p>"},{"location":"development/#run-kiara","title":"Run kiara","text":"<p>To check if everything works as expected and you can start adding/changing code in this repository, run any <code>kiara</code> command:</p> <pre><code>kiara operation list -t onboarding\n</code></pre> <p>If everything is set up correctly, the output of this command should contain a few operations that are implemented in this repository.</p>"},{"location":"usage/","title":"Usage","text":"<p>TO BE DONE</p>"},{"location":"info/SUMMARY/","title":"SUMMARY","text":"<ul> <li>module_types</li> <li>operations</li> </ul>"},{"location":"info/module_types/","title":"module_types","text":""},{"location":"info/module_types/#kiara_info.module_types.onboard.zenodo_record","title":"<code>onboard.zenodo_record</code>","text":"<pre>                                                                                                                                            \n Documentation                                                                                                                              \n                          Download a dataset from zenodo.org.                                                                               \n                                                                                                                                            \n Author(s)                                                                                                                                  \n                          Markus Binsteiner   markus@frkl.io                                                                                \n                                                                                                                                            \n Context                                                                                                                                    \n                          Tags         onboarding                                                                                           \n                          Labels       package: kiara_plugin.onboarding                                                                     \n                          References   source_repo: https://github.com/DHARPA-Project/kiara_plugin.onboarding                               \n                                       documentation: https://DHARPA-Project.github.io/kiara_plugin.onboarding/                             \n                                                                                                                                            \n Module config schema                                                                                                                       \n                          Field               Type     Description                             Required   Default                           \n                         \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500                  \n                          constants           object   Value constants for this module.        no                                           \n                                                                                                                                            \n                          defaults            object   Value defaults for this module.         no                                           \n                                                                                                                                            \n                          metadata_filename   string   The filename for the zenodo metadata.   no         \"metadata.json\"                   \n                                                                                                                                            \n Python class                                                                                                                               \n                          python_class_name    ZenodoDownload                                                                               \n                          python_module_name   kiara_plugin.onboarding.modules                                                              \n                          full_name            kiara_plugin.onboarding.modules.ZenodoDownload                                               \n                                                                                                                                            \n Processing source code  \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500  \n                          def process(self, inputs: ValueMap, outputs: ValueMap):                                                           \n                                                                                                                                            \n                              import pyzenodo3                                                                                              \n                                                                                                                                            \n                              include_metadata = inputs.get_value_data(\"include_metadata\")                                                  \n                                                                                                                                            \n                              doi = inputs.get_value_data(\"doi\")                                                                            \n                              zen = pyzenodo3.Zenodo()                                                                                      \n                                                                                                                                            \n                              record = zen.find_record_by_doi(doi)                                                                          \n                                                                                                                                            \n                              path = FileBundle.create_tmp_dir()                                                                            \n                              shutil.rmtree(path, ignore_errors=True)                                                                       \n                              path.mkdir()                                                                                                  \n                              for file_data in record.data[\"files\"]:                                                                        \n                                  self.download_file(file_data, path)                                                                       \n                                                                                                                                            \n                              if include_metadata:                                                                                          \n                                  metadata_filename = self.get_config_value(\"metadata_filename\")                                            \n                                  metadata_file = path / metadata_filename                                                                  \n                                  metadata_file.write_bytes(orjson.dumps(record.data))                                                      \n                                                                                                                                            \n                              bundle = FileBundle.import_folder(path.as_posix())                                                            \n                              outputs.set_value(\"file_bundle\", bundle)                                                                      \n                                                                                                                                            \n                         \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500  \n                                                                                                                                            \n</pre>"},{"location":"info/operations/","title":"operations","text":""},{"location":"info/operations/#kiara_info.operations.onboard.zenodo_record","title":"<code>onboard.zenodo_record</code>","text":"Documentation <p>Download a dataset from zenodo.org.</p>    Inputs     field name type description required default     doi string The doi of the record yes   include_metadata boolean Whether to write the record metadata to a file 'metadata.json' and include it in the resulting file bundle. no True       Outputs     field name type description required default     file_bundle file_bundle -- n/a -- yes"},{"location":"reference/SUMMARY/","title":"SUMMARY","text":"<ul> <li>kiara_plugin<ul> <li>onboarding<ul> <li>data_types</li> <li>models</li> <li>modules</li> <li>pipelines</li> </ul> </li> </ul> </li> </ul>"},{"location":"reference/kiara_plugin/onboarding/__init__/","title":"onboarding","text":"<p>Top-level package for kiara_plugin.onboarding.</p>"},{"location":"reference/kiara_plugin/onboarding/__init__/#kiara_plugin.onboarding.KIARA_METADATA","title":"<code>KIARA_METADATA</code>","text":""},{"location":"reference/kiara_plugin/onboarding/__init__/#kiara_plugin.onboarding.find_data_types","title":"<code>find_data_types: Union[Type, Tuple, Callable]</code>","text":""},{"location":"reference/kiara_plugin/onboarding/__init__/#kiara_plugin.onboarding.find_model_classes","title":"<code>find_model_classes: Union[Type, Tuple, Callable]</code>","text":""},{"location":"reference/kiara_plugin/onboarding/__init__/#kiara_plugin.onboarding.find_modules","title":"<code>find_modules: Union[Type, Tuple, Callable]</code>","text":""},{"location":"reference/kiara_plugin/onboarding/__init__/#kiara_plugin.onboarding.find_pipelines","title":"<code>find_pipelines: Union[Type, Tuple, Callable]</code>","text":""},{"location":"reference/kiara_plugin/onboarding/__init__/#kiara_plugin.onboarding.get_version","title":"<code>get_version()</code>","text":"Source code in <code>onboarding/__init__.py</code> <pre><code>def get_version():\n    from pkg_resources import DistributionNotFound, get_distribution\n\n    try:\n        # Change here if project is renamed and does not equal the package name\n        dist_name = __name__\n        __version__ = get_distribution(dist_name).version\n    except DistributionNotFound:\n\n        try:\n            version_file = os.path.join(os.path.dirname(__file__), \"version.txt\")\n\n            if os.path.exists(version_file):\n                with open(version_file, encoding=\"utf-8\") as vf:\n                    __version__ = vf.read()\n            else:\n                __version__ = \"unknown\"\n\n        except (Exception):\n            pass\n\n        if __version__ is None:\n            __version__ = \"unknown\"\n\n    return __version__\n</code></pre>"},{"location":"reference/kiara_plugin/onboarding/__init__/#kiara_plugin.onboarding-modules","title":"Modules","text":""},{"location":"reference/kiara_plugin/onboarding/__init__/#kiara_plugin.onboarding.data_types","title":"<code>data_types</code>","text":"<p>This module contains the value type classes that are used in the <code>kiara_plugin.onboarding</code> package.</p>"},{"location":"reference/kiara_plugin/onboarding/__init__/#kiara_plugin.onboarding.models","title":"<code>models</code>","text":"<p>This module contains the metadata (and other) models that are used in the <code>kiara_plugin.onboarding</code> package.</p> <p>Those models are convenience wrappers that make it easier for kiara to find, create, manage and version metadata -- but also other type of models -- that is attached to data, as well as kiara modules.</p> <p>Metadata models must be a sub-class of kiara.metadata.MetadataModel. Other models usually sub-class a pydantic BaseModel or implement custom base classes.</p>"},{"location":"reference/kiara_plugin/onboarding/__init__/#kiara_plugin.onboarding.modules","title":"<code>modules</code>  <code>special</code>","text":""},{"location":"reference/kiara_plugin/onboarding/__init__/#kiara_plugin.onboarding.modules-classes","title":"Classes","text":""},{"location":"reference/kiara_plugin/onboarding/__init__/#kiara_plugin.onboarding.modules.ZenodoDownload","title":"<code> ZenodoDownload            (KiaraModule)         </code>","text":"<p>Download a dataset from zenodo.org.</p>  Source code in <code>onboarding/modules/__init__.py</code> <pre><code>class ZenodoDownload(KiaraModule):\n    \"\"\"Download a dataset from zenodo.org.\"\"\"\n\n    _module_type_name = \"onboard.zenodo_record\"\n    _config_cls = ZenodoDownloadConfig\n\n    def create_inputs_schema(\n        self,\n    ) -&gt; ValueMapSchema:\n\n        metadata_filename = self.get_config_value(\"metadata_filename\")\n        return {\n            \"doi\": {\"type\": \"string\", \"doc\": \"The doi of the record\"},\n            \"include_metadata\": {\n                \"type\": \"boolean\",\n                \"doc\": f\"Whether to write the record metadata to a file '{metadata_filename}' and include it in the resulting file bundle.\",\n                \"default\": True,\n            },\n        }\n\n    def create_outputs_schema(\n        self,\n    ) -&gt; ValueMapSchema:\n\n        return {\n            \"file_bundle\": {\n                \"type\": \"file_bundle\",\n            }\n        }\n\n    def download_file(self, file_data: Mapping[str, Any], target_path: Path):\n\n        import httpx\n\n        url = file_data[\"links\"][\"self\"]\n        file_name = file_data[\"key\"]\n        checksum = file_data[\"checksum\"][4:]\n\n        target_file = target_path / file_name\n\n        if target_file.exists():\n            raise KiaraProcessingException(\n                f\"Can't download file, target path already exists: {target_path.as_posix()}.\"\n            )\n\n        hash_md5 = hashlib.md5()\n\n        with open(target_file, \"ab\") as file2:\n            with httpx.Client() as client:\n                with client.stream(\"GET\", url) as resp:\n                    for chunk in resp.iter_bytes():\n                        hash_md5.update(chunk)\n                        file2.write(chunk)\n\n        if checksum != hash_md5.hexdigest():\n            raise KiaraProcessingException(\n                f\"Can't downloda file '{file_name}', invalid checksum: {checksum} != {hash_md5.hexdigest()}\"\n            )\n\n        return target_file\n\n    def process(self, inputs: ValueMap, outputs: ValueMap):\n\n        import pyzenodo3\n\n        include_metadata = inputs.get_value_data(\"include_metadata\")\n\n        doi = inputs.get_value_data(\"doi\")\n        zen = pyzenodo3.Zenodo()\n\n        record = zen.find_record_by_doi(doi)\n\n        path = FileBundle.create_tmp_dir()\n        shutil.rmtree(path, ignore_errors=True)\n        path.mkdir()\n        for file_data in record.data[\"files\"]:\n            self.download_file(file_data, path)\n\n        if include_metadata:\n            metadata_filename = self.get_config_value(\"metadata_filename\")\n            metadata_file = path / metadata_filename\n            metadata_file.write_bytes(orjson.dumps(record.data))\n\n        bundle = FileBundle.import_folder(path.as_posix())\n        outputs.set_value(\"file_bundle\", bundle)\n</code></pre>"},{"location":"reference/kiara_plugin/onboarding/__init__/#kiara_plugin.onboarding.modules.ZenodoDownload-classes","title":"Classes","text":"<code> _config_cls            (KiaraModuleConfig)         </code>  <code>private</code> <code>pydantic-model</code>  \u00b6   Source code in <code>onboarding/modules/__init__.py</code> <pre><code>class ZenodoDownloadConfig(KiaraModuleConfig):\n\n    metadata_filename: str = Field(\n        description=\"The filename for the zenodo metadata.\", default=\"metadata.json\"\n    )\n</code></pre>   Attributes\u00b6   <code>metadata_filename: str</code>  <code>pydantic-field</code>  \u00b6  <p>The filename for the zenodo metadata.</p>"},{"location":"reference/kiara_plugin/onboarding/__init__/#kiara_plugin.onboarding.modules.ZenodoDownload-methods","title":"Methods","text":"<code>create_inputs_schema(self)</code> \u00b6  <p>Return the schema for this types' inputs.</p>  Source code in <code>onboarding/modules/__init__.py</code> <pre><code>def create_inputs_schema(\n    self,\n) -&gt; ValueMapSchema:\n\n    metadata_filename = self.get_config_value(\"metadata_filename\")\n    return {\n        \"doi\": {\"type\": \"string\", \"doc\": \"The doi of the record\"},\n        \"include_metadata\": {\n            \"type\": \"boolean\",\n            \"doc\": f\"Whether to write the record metadata to a file '{metadata_filename}' and include it in the resulting file bundle.\",\n            \"default\": True,\n        },\n    }\n</code></pre>      <code>create_outputs_schema(self)</code> \u00b6  <p>Return the schema for this types' outputs.</p>  Source code in <code>onboarding/modules/__init__.py</code> <pre><code>def create_outputs_schema(\n    self,\n) -&gt; ValueMapSchema:\n\n    return {\n        \"file_bundle\": {\n            \"type\": \"file_bundle\",\n        }\n    }\n</code></pre>      <code>download_file(self, file_data, target_path)</code> \u00b6   Source code in <code>onboarding/modules/__init__.py</code> <pre><code>def download_file(self, file_data: Mapping[str, Any], target_path: Path):\n\n    import httpx\n\n    url = file_data[\"links\"][\"self\"]\n    file_name = file_data[\"key\"]\n    checksum = file_data[\"checksum\"][4:]\n\n    target_file = target_path / file_name\n\n    if target_file.exists():\n        raise KiaraProcessingException(\n            f\"Can't download file, target path already exists: {target_path.as_posix()}.\"\n        )\n\n    hash_md5 = hashlib.md5()\n\n    with open(target_file, \"ab\") as file2:\n        with httpx.Client() as client:\n            with client.stream(\"GET\", url) as resp:\n                for chunk in resp.iter_bytes():\n                    hash_md5.update(chunk)\n                    file2.write(chunk)\n\n    if checksum != hash_md5.hexdigest():\n        raise KiaraProcessingException(\n            f\"Can't downloda file '{file_name}', invalid checksum: {checksum} != {hash_md5.hexdigest()}\"\n        )\n\n    return target_file\n</code></pre>      <code>process(self, inputs, outputs)</code> \u00b6   Source code in <code>onboarding/modules/__init__.py</code> <pre><code>def process(self, inputs: ValueMap, outputs: ValueMap):\n\n    import pyzenodo3\n\n    include_metadata = inputs.get_value_data(\"include_metadata\")\n\n    doi = inputs.get_value_data(\"doi\")\n    zen = pyzenodo3.Zenodo()\n\n    record = zen.find_record_by_doi(doi)\n\n    path = FileBundle.create_tmp_dir()\n    shutil.rmtree(path, ignore_errors=True)\n    path.mkdir()\n    for file_data in record.data[\"files\"]:\n        self.download_file(file_data, path)\n\n    if include_metadata:\n        metadata_filename = self.get_config_value(\"metadata_filename\")\n        metadata_file = path / metadata_filename\n        metadata_file.write_bytes(orjson.dumps(record.data))\n\n    bundle = FileBundle.import_folder(path.as_posix())\n    outputs.set_value(\"file_bundle\", bundle)\n</code></pre>"},{"location":"reference/kiara_plugin/onboarding/__init__/#kiara_plugin.onboarding.modules.ZenodoDownloadConfig","title":"<code> ZenodoDownloadConfig            (KiaraModuleConfig)         </code>  <code>pydantic-model</code>","text":"Source code in <code>onboarding/modules/__init__.py</code> <pre><code>class ZenodoDownloadConfig(KiaraModuleConfig):\n\n    metadata_filename: str = Field(\n        description=\"The filename for the zenodo metadata.\", default=\"metadata.json\"\n    )\n</code></pre>"},{"location":"reference/kiara_plugin/onboarding/__init__/#kiara_plugin.onboarding.modules.ZenodoDownloadConfig-attributes","title":"Attributes","text":"<code>metadata_filename: str</code>  <code>pydantic-field</code>  \u00b6  <p>The filename for the zenodo metadata.</p>"},{"location":"reference/kiara_plugin/onboarding/__init__/#kiara_plugin.onboarding.pipelines","title":"<code>pipelines</code>  <code>special</code>","text":"<p>Default (empty) module that is used as a base path for pipelines contained in this package.</p>"},{"location":"reference/kiara_plugin/onboarding/data_types/","title":"data_types","text":"<p>This module contains the value type classes that are used in the <code>kiara_plugin.onboarding</code> package.</p>"},{"location":"reference/kiara_plugin/onboarding/models/","title":"models","text":"<p>This module contains the metadata (and other) models that are used in the <code>kiara_plugin.onboarding</code> package.</p> <p>Those models are convenience wrappers that make it easier for kiara to find, create, manage and version metadata -- but also other type of models -- that is attached to data, as well as kiara modules.</p> <p>Metadata models must be a sub-class of kiara.metadata.MetadataModel. Other models usually sub-class a pydantic BaseModel or implement custom base classes.</p>"},{"location":"reference/kiara_plugin/onboarding/modules/__init__/","title":"modules","text":""},{"location":"reference/kiara_plugin/onboarding/modules/__init__/#kiara_plugin.onboarding.modules-classes","title":"Classes","text":""},{"location":"reference/kiara_plugin/onboarding/modules/__init__/#kiara_plugin.onboarding.modules.ZenodoDownload","title":"<code> ZenodoDownload            (KiaraModule)         </code>","text":"<p>Download a dataset from zenodo.org.</p>  Source code in <code>onboarding/modules/__init__.py</code> <pre><code>class ZenodoDownload(KiaraModule):\n    \"\"\"Download a dataset from zenodo.org.\"\"\"\n\n    _module_type_name = \"onboard.zenodo_record\"\n    _config_cls = ZenodoDownloadConfig\n\n    def create_inputs_schema(\n        self,\n    ) -&gt; ValueMapSchema:\n\n        metadata_filename = self.get_config_value(\"metadata_filename\")\n        return {\n            \"doi\": {\"type\": \"string\", \"doc\": \"The doi of the record\"},\n            \"include_metadata\": {\n                \"type\": \"boolean\",\n                \"doc\": f\"Whether to write the record metadata to a file '{metadata_filename}' and include it in the resulting file bundle.\",\n                \"default\": True,\n            },\n        }\n\n    def create_outputs_schema(\n        self,\n    ) -&gt; ValueMapSchema:\n\n        return {\n            \"file_bundle\": {\n                \"type\": \"file_bundle\",\n            }\n        }\n\n    def download_file(self, file_data: Mapping[str, Any], target_path: Path):\n\n        import httpx\n\n        url = file_data[\"links\"][\"self\"]\n        file_name = file_data[\"key\"]\n        checksum = file_data[\"checksum\"][4:]\n\n        target_file = target_path / file_name\n\n        if target_file.exists():\n            raise KiaraProcessingException(\n                f\"Can't download file, target path already exists: {target_path.as_posix()}.\"\n            )\n\n        hash_md5 = hashlib.md5()\n\n        with open(target_file, \"ab\") as file2:\n            with httpx.Client() as client:\n                with client.stream(\"GET\", url) as resp:\n                    for chunk in resp.iter_bytes():\n                        hash_md5.update(chunk)\n                        file2.write(chunk)\n\n        if checksum != hash_md5.hexdigest():\n            raise KiaraProcessingException(\n                f\"Can't downloda file '{file_name}', invalid checksum: {checksum} != {hash_md5.hexdigest()}\"\n            )\n\n        return target_file\n\n    def process(self, inputs: ValueMap, outputs: ValueMap):\n\n        import pyzenodo3\n\n        include_metadata = inputs.get_value_data(\"include_metadata\")\n\n        doi = inputs.get_value_data(\"doi\")\n        zen = pyzenodo3.Zenodo()\n\n        record = zen.find_record_by_doi(doi)\n\n        path = FileBundle.create_tmp_dir()\n        shutil.rmtree(path, ignore_errors=True)\n        path.mkdir()\n        for file_data in record.data[\"files\"]:\n            self.download_file(file_data, path)\n\n        if include_metadata:\n            metadata_filename = self.get_config_value(\"metadata_filename\")\n            metadata_file = path / metadata_filename\n            metadata_file.write_bytes(orjson.dumps(record.data))\n\n        bundle = FileBundle.import_folder(path.as_posix())\n        outputs.set_value(\"file_bundle\", bundle)\n</code></pre>"},{"location":"reference/kiara_plugin/onboarding/modules/__init__/#kiara_plugin.onboarding.modules.ZenodoDownload-classes","title":"Classes","text":""},{"location":"reference/kiara_plugin/onboarding/modules/__init__/#kiara_plugin.onboarding.modules.ZenodoDownload._config_cls","title":"<code> _config_cls            (KiaraModuleConfig)         </code>  <code>private</code> <code>pydantic-model</code>","text":"Source code in <code>onboarding/modules/__init__.py</code> <pre><code>class ZenodoDownloadConfig(KiaraModuleConfig):\n\n    metadata_filename: str = Field(\n        description=\"The filename for the zenodo metadata.\", default=\"metadata.json\"\n    )\n</code></pre>"},{"location":"reference/kiara_plugin/onboarding/modules/__init__/#kiara_plugin.onboarding.modules.ZenodoDownload._config_cls-attributes","title":"Attributes","text":"<code>metadata_filename: str</code>  <code>pydantic-field</code>  \u00b6  <p>The filename for the zenodo metadata.</p>"},{"location":"reference/kiara_plugin/onboarding/modules/__init__/#kiara_plugin.onboarding.modules.ZenodoDownload-methods","title":"Methods","text":""},{"location":"reference/kiara_plugin/onboarding/modules/__init__/#kiara_plugin.onboarding.modules.ZenodoDownload.create_inputs_schema","title":"<code>create_inputs_schema(self)</code>","text":"<p>Return the schema for this types' inputs.</p>  Source code in <code>onboarding/modules/__init__.py</code> <pre><code>def create_inputs_schema(\n    self,\n) -&gt; ValueMapSchema:\n\n    metadata_filename = self.get_config_value(\"metadata_filename\")\n    return {\n        \"doi\": {\"type\": \"string\", \"doc\": \"The doi of the record\"},\n        \"include_metadata\": {\n            \"type\": \"boolean\",\n            \"doc\": f\"Whether to write the record metadata to a file '{metadata_filename}' and include it in the resulting file bundle.\",\n            \"default\": True,\n        },\n    }\n</code></pre>"},{"location":"reference/kiara_plugin/onboarding/modules/__init__/#kiara_plugin.onboarding.modules.ZenodoDownload.create_outputs_schema","title":"<code>create_outputs_schema(self)</code>","text":"<p>Return the schema for this types' outputs.</p>  Source code in <code>onboarding/modules/__init__.py</code> <pre><code>def create_outputs_schema(\n    self,\n) -&gt; ValueMapSchema:\n\n    return {\n        \"file_bundle\": {\n            \"type\": \"file_bundle\",\n        }\n    }\n</code></pre>"},{"location":"reference/kiara_plugin/onboarding/modules/__init__/#kiara_plugin.onboarding.modules.ZenodoDownload.download_file","title":"<code>download_file(self, file_data, target_path)</code>","text":"Source code in <code>onboarding/modules/__init__.py</code> <pre><code>def download_file(self, file_data: Mapping[str, Any], target_path: Path):\n\n    import httpx\n\n    url = file_data[\"links\"][\"self\"]\n    file_name = file_data[\"key\"]\n    checksum = file_data[\"checksum\"][4:]\n\n    target_file = target_path / file_name\n\n    if target_file.exists():\n        raise KiaraProcessingException(\n            f\"Can't download file, target path already exists: {target_path.as_posix()}.\"\n        )\n\n    hash_md5 = hashlib.md5()\n\n    with open(target_file, \"ab\") as file2:\n        with httpx.Client() as client:\n            with client.stream(\"GET\", url) as resp:\n                for chunk in resp.iter_bytes():\n                    hash_md5.update(chunk)\n                    file2.write(chunk)\n\n    if checksum != hash_md5.hexdigest():\n        raise KiaraProcessingException(\n            f\"Can't downloda file '{file_name}', invalid checksum: {checksum} != {hash_md5.hexdigest()}\"\n        )\n\n    return target_file\n</code></pre>"},{"location":"reference/kiara_plugin/onboarding/modules/__init__/#kiara_plugin.onboarding.modules.ZenodoDownload.process","title":"<code>process(self, inputs, outputs)</code>","text":"Source code in <code>onboarding/modules/__init__.py</code> <pre><code>def process(self, inputs: ValueMap, outputs: ValueMap):\n\n    import pyzenodo3\n\n    include_metadata = inputs.get_value_data(\"include_metadata\")\n\n    doi = inputs.get_value_data(\"doi\")\n    zen = pyzenodo3.Zenodo()\n\n    record = zen.find_record_by_doi(doi)\n\n    path = FileBundle.create_tmp_dir()\n    shutil.rmtree(path, ignore_errors=True)\n    path.mkdir()\n    for file_data in record.data[\"files\"]:\n        self.download_file(file_data, path)\n\n    if include_metadata:\n        metadata_filename = self.get_config_value(\"metadata_filename\")\n        metadata_file = path / metadata_filename\n        metadata_file.write_bytes(orjson.dumps(record.data))\n\n    bundle = FileBundle.import_folder(path.as_posix())\n    outputs.set_value(\"file_bundle\", bundle)\n</code></pre>"},{"location":"reference/kiara_plugin/onboarding/modules/__init__/#kiara_plugin.onboarding.modules.ZenodoDownloadConfig","title":"<code> ZenodoDownloadConfig            (KiaraModuleConfig)         </code>  <code>pydantic-model</code>","text":"Source code in <code>onboarding/modules/__init__.py</code> <pre><code>class ZenodoDownloadConfig(KiaraModuleConfig):\n\n    metadata_filename: str = Field(\n        description=\"The filename for the zenodo metadata.\", default=\"metadata.json\"\n    )\n</code></pre>"},{"location":"reference/kiara_plugin/onboarding/modules/__init__/#kiara_plugin.onboarding.modules.ZenodoDownloadConfig-attributes","title":"Attributes","text":""},{"location":"reference/kiara_plugin/onboarding/modules/__init__/#kiara_plugin.onboarding.modules.ZenodoDownloadConfig.metadata_filename","title":"<code>metadata_filename: str</code>  <code>pydantic-field</code>","text":"<p>The filename for the zenodo metadata.</p>"},{"location":"reference/kiara_plugin/onboarding/pipelines/__init__/","title":"pipelines","text":"<p>Default (empty) module that is used as a base path for pipelines contained in this package.</p>"}]}