{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"kiara plugin: onboarding","text":"<p>This package contains a set of commonly used/useful modules, pipelines, types and metadata schemas for Kiara.</p>"},{"location":"#description","title":"Description","text":"<p>kiara modules for data onboarding.</p>"},{"location":"#package-content","title":"Package content","text":""},{"location":"#module_types","title":"module_types","text":"<ul> <li> <p><code>download.file</code>: Download a single file from a remote location.</p> </li> <li> <p><code>download.file_bundle</code>: -- n/a --</p> </li> <li> <p><code>import.file</code>: A generic module to import a file from any local or remote location.</p> </li> <li> <p><code>import.file_bundle</code>: A generic module to import a file bundle from any local or remote location.</p> </li> <li> <p><code>onboard.zenodo_record</code>: Download a dataset from zenodo.org.</p> </li> </ul>"},{"location":"#operations","title":"operations","text":"<ul> <li> <p><code>download.file</code>: Download a single file from a remote location.</p> </li> <li> <p><code>download.file_bundle</code>: -- n/a --</p> </li> <li> <p><code>import.file</code>: A generic module to import a file from any local or remote location.</p> </li> <li> <p><code>import.file_bundle</code>: A generic module to import a file bundle from any local or remote location.</p> </li> <li> <p><code>onboard.zenodo_record</code>: Download a dataset from zenodo.org.</p> </li> </ul>"},{"location":"#links","title":"Links","text":"<ul> <li>Documentation: https://DHARPA-Project.github.io/kiara_plugin.onboarding</li> <li>Code: https://github.com/DHARPA-Project/kiara_plugin.onboarding</li> </ul>"},{"location":"SUMMARY/","title":"SUMMARY","text":"<ul> <li>Home</li> <li>Package contents</li> <li>Usage</li> <li>Development</li> <li>API reference</li> </ul>"},{"location":"development/","title":"Development","text":""},{"location":"development/#prepare-development-environment","title":"Prepare development environment","text":""},{"location":"development/#using-conda-recommended","title":"Using conda (recommended)","text":"<pre><code>conda create -n onboarding python=3.9\nconda activate onboarding\nconda install -c conda-forge mamba   # this is optional, but makes everything install related much faster, if you don't use it, replace 'mamba' with 'conda' below\nmamba install -c conda-forge -c dharpa kiara\nmamba install -c conda-forge -c dharpa kiara_plugin.core_types kiara_plugin.tabular   # optional, adjust which plugin packages you depend on, those two are quite common\n</code></pre>"},{"location":"development/#using-python-venv","title":"Using Python venv","text":"<p>Later, alligator.</p>"},{"location":"development/#check-out-the-source-code","title":"Check out the source code","text":"<p>First, fork the kiara_plugin.onboarding repository into your personal Github account.</p> <p>Then, use the resulting url (in my case: https://github.com/makkus/kiara_modules.onboarding.git) to clone the repository locally:</p> <pre><code>https://github.com/&lt;YOUR_FORKED_GITHUB_ID&gt;/kiara_plugin.onboarding\n</code></pre>"},{"location":"development/#install-the-kiara-plugin-package-into-it","title":"Install the kiara plugin package into it","text":"<pre><code>cd kiara_plugin.onboarding\npip install -e '.[all_dev]'\n</code></pre> <p>Here we use the <code>-e</code> option for the <code>pip install</code> command. This installs the local folder as a package in development mode into the current environment. Development mode makes it so that if you change any of the files in this folder, the Python environment will pick it up automatically, and whenever you run anything in this environment the latest version of your code/files are used.</p> <p>We also install a few additional requirements  (the <code>[all_dev]</code> part in the command above) that are not strictly necessary for <code>kiara</code> itself, or this package, but help with various development-related tasks.</p>"},{"location":"development/#install-some-pre-commit-check-tooling-optional","title":"Install some pre-commit check tooling (optional)","text":"<p>This step is optional, but helps with keeping the code clean and CI from failing. By installing pre-commit hooks like here, whenever you do a <code>git commit</code> in this repo, a series of checks and cleanup tasks are run, until everything is in a state that will hopefully make Github Actions not complain when you push your changes.</p> <pre><code>pre-commit install\npre-commit install --hook-type commit-msg\n</code></pre> <p>In addition to some Python-specific checks and cleanup tasks, this will also check your commit message so it's in line with the suggested format: https://www.conventionalcommits.org/en/v1.0.0/</p>"},{"location":"development/#run-kiara","title":"Run kiara","text":"<p>To check if everything works as expected and you can start adding/changing code in this repository, run any <code>kiara</code> command:</p> <pre><code>kiara operation list -t onboarding\n</code></pre> <p>If everything is set up correctly, the output of this command should contain a few operations that are implemented in this repository.</p>"},{"location":"usage/","title":"Usage","text":"<p>TO BE DONE</p>"},{"location":"info/SUMMARY/","title":"SUMMARY","text":"<ul> <li>module_types</li> <li>operations</li> </ul>"},{"location":"info/module_types/","title":"module_types","text":""},{"location":"info/module_types/#kiara_info.module_types.download.file","title":"<code>download.file</code>","text":"<pre>                                                                                \n Documentation                                                                  \n    Download a single file from a remote location.        \n                          The result of this operation is a single value of     \n                          type 'file' (basically an array of raw bytes),        \n                          which can then be used in other modules to create     \n                          more meaningful data structures.                      \n                       Author(s)                                                                      \n    Markus Binsteiner   markus@frkl.io                    \n Context                                                                        \n  Tags         onboarding                               \n                        Labels       package: kiara_plugin.onboarding         \n                        References   source_repo:                             \n                       https://github.com/DHARPA-Project/kia\u2026   \n documentation:                           \n                       https://DHARPA-Project.github.io/kiar\u2026   \n Module config schema                                                           \n  Field       Type      Descrip\u2026   Required   Default   \n   \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500  \n                          constants   object    Value      no                   \n                                                constan\u2026                        \n                                                for this                        \n                                                module.                         \n                          defaults    object    Value      no                   \n                                                defaults                        \n                                                for this                        \n                                                module.                         \n                          download\u2026   boolean   Whether    no         true      \n                                                to                              \n                                                return                          \n                                                the                             \n                                                download                        \n                                                metadata                        \n                                                as well.                        \n                       Python class                                                                   \n  python_class_name    DownloadFileModule               \n                        python_module_name   kiara_plugin.onboarding.modul\u2026   \n                        full_name            kiara_plugin.onboarding.modul\u2026   \n                       Processing source code  \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500  \n                       class DownloadFileModule(KiaraModule):                \n \"\"\"Download a single file from a remote locati\u2026   \n     The result of this operation is a single value\u2026   \n     create more meaningful data structures.           \n     \"\"\"                                               \n     _module_type_name = \"download.file\"               \n     _config_cls = DownloadFileConfig                  \n def create_inputs_schema(self) -&gt; ValueMapSche\u2026   \n         result: Dict[str, Dict[str, Any]] = {         \n \"url\": {\"type\": \"string\", \"doc\": \"The \u2026   \n \"file_name\": {                            \n \"type\": \"string\",                     \n \"doc\": \"The file name to use for t\u2026   \n \"optional\": True,                     \n             },                                        \n         }                                             \n return result                                 \n def create_outputs_schema(                        \n         self,                                         \n     ) -&gt; ValueMapSchema:                              \n         result: Dict[str, Dict[str, Any]] = {         \n \"file\": {                                 \n \"type\": \"file\",                       \n \"doc\": \"The downloaded file.\",        \n             }                                         \n         }                                             \n if self.get_config_value(\"download_metadat\u2026   \n             result[\"download_metadata\"] = {           \n \"type\": \"dict\",                       \n \"doc\": \"Metadata about the downloa\u2026   \n             }                                         \n return result                                 \n def process(self, inputs: ValueMap, outputs: V\u2026   \n         url = inputs.get_value_data(\"url\")            \n         file_name = inputs.get_value_data(\"file_na\u2026   \n         result_file, metadata = download_file(url=\u2026   \n         outputs.set_value(\"download_metadata\", met\u2026   \n         outputs.set_value(\"file\", result_file)        \n   \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500  \n                                                                                \n</pre>"},{"location":"info/module_types/#kiara_info.module_types.download.file_bundle","title":"<code>download.file_bundle</code>","text":"<pre>                                                                                \n Documentation                                                                  \n    -- n/a --                                             \n                       Author(s)                                                                      \n    Markus Binsteiner   markus@frkl.io                    \n Context                                                                        \n  Tags         onboarding                               \n                        Labels       package: kiara_plugin.onboarding         \n                        References   source_repo:                             \n                       https://github.com/DHARPA-Project/kia\u2026   \n documentation:                           \n                       https://DHARPA-Project.github.io/kiar\u2026   \n Module config schema                                                           \n  Field       Type      Descrip\u2026   Required   Default   \n   \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500  \n                          constants   object    Value      no                   \n                                                constan\u2026                        \n                                                for this                        \n                                                module.                         \n                          defaults    object    Value      no                   \n                                                defaults                        \n                                                for this                        \n                                                module.                         \n                          download\u2026   boolean   Whether    no         true      \n                                                to                              \n                                                return                          \n                                                the                             \n                                                download                        \n                                                metadata                        \n                                                as well.                        \n                       Python class                                                                   \n  python_class_name    DownloadFileBundleModule         \n                        python_module_name   kiara_plugin.onboarding.modul\u2026   \n                        full_name            kiara_plugin.onboarding.modul\u2026   \n                       Processing source code  \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500  \n                       class DownloadFileBundleModule(KiaraModule):          \n     _module_type_name = \"download.file_bundle\"        \n     _config_cls = DownloadFileConfig                  \n def create_inputs_schema(self) -&gt; ValueMapSche\u2026   \n         result: Dict[str, Dict[str, Any]] = {         \n \"url\": {                                  \n \"type\": \"string\",                     \n \"doc\": \"The url of an archive/zip \u2026   \n             },                                        \n \"sub_path\": {                             \n \"type\": \"string\",                     \n \"doc\": \"A relative path to select \u2026   \n \"optional\": True,                     \n             },                                        \n         }                                             \n return result                                 \n def create_outputs_schema(                        \n         self,                                         \n     ) -&gt; ValueMapSchema:                              \n         result: Dict[str, Dict[str, Any]] = {         \n \"file_bundle\": {                          \n \"type\": \"file_bundle\",                \n \"doc\": \"The downloaded file bundle\u2026   \n             }                                         \n         }                                             \n if self.get_config_value(\"download_metadat\u2026   \n             result[\"download_metadata\"] = {           \n \"type\": \"dict\",                       \n \"doc\": \"Metadata about the downloa\u2026   \n             }                                         \n return result                                 \n def process(self, inputs: ValueMap, outputs: V\u2026   \n from datetime import datetime                 \n from urllib.parse import urlparse             \n import httpx                                  \n import pytz                                   \n         url = inputs.get_value_data(\"url\")            \n         suffix = None                                 \n try:                                          \n             parsed_url = urlparse(url)                \n             _, suffix = os.path.splitext(parsed_ur\u2026   \n except Exception:                             \n pass                                      \n if not suffix:                                \n             suffix = \"\"                               \n         sub_path: Union[None, str] = inputs.get_va\u2026   \n         tmp_file = tempfile.NamedTemporaryFile(del\u2026   \n         atexit.register(tmp_file.close)               \n         history = []                                  \n         datetime.utcnow().replace(tzinfo=pytz.utc)    \n with open(tmp_file.name, \"wb\") as f:          \n with httpx.stream(\"GET\", url, follow_r\u2026   \n                 history.append(dict(r.headers))       \n for h in r.history:                   \n                     history.append(dict(h.headers))   \n for data in r.iter_bytes():           \n                     f.write(data)                     \n         out_dir = tempfile.mkdtemp()                  \n def del_out_dir():                            \n             shutil.rmtree(out_dir, ignore_errors=T\u2026   \n         atexit.register(del_out_dir)                  \n         error = None                                  \n try:                                          \n             shutil.unpack_archive(tmp_file.name, o\u2026   \n except Exception:                             \n # try patool, maybe we're lucky           \n try:                                      \n import patoolib                       \n                 patoolib.extract_archive(tmp_file.\u2026   \n except Exception as e:                    \n                 error = e                             \n if error is not None:                         \n raise KiaraProcessingException(f\"Could\u2026   \n         path = out_dir                                \n if sub_path:                                  \n             path = os.path.join(out_dir, sub_path)    \n         bundle = FileBundle.import_folder(path)       \n         metadata = {                                  \n \"response_headers\": history,              \n \"request_time\": datetime.utcnow().repl\u2026   \n         }                                             \n         outputs.set_value(\"download_metadata\", met\u2026   \n         outputs.set_value(\"file_bundle\", bundle)      \n   \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500  \n                                                                                \n</pre>"},{"location":"info/module_types/#kiara_info.module_types.import.file","title":"<code>import.file</code>","text":"<pre>                                                                                \n Documentation                                                                  \n    A generic module to import a file from any local or   \n                          remote location.                                      \n                       Author(s)                                                                      \n    Markus Binsteiner   markus@frkl.io                    \n Context                                                                        \n  Tags         onboarding                               \n                        Labels       package: kiara_plugin.onboarding         \n                        References   source_repo:                             \n                       https://github.com/DHARPA-Project/kia\u2026   \n documentation:                           \n                       https://DHARPA-Project.github.io/kiar\u2026   \n Module config schema                                                           \n  Field       Type      Descrip\u2026   Required   Default   \n   \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500  \n                          constants   object    Value      no                   \n                                                constan\u2026                        \n                                                for this                        \n                                                module.                         \n                          defaults    object    Value      no                   \n                                                defaults                        \n                                                for this                        \n                                                module.                         \n                          import_m\u2026   boolean   Whether    no         true      \n                                                to                              \n                                                return                          \n                                                the                             \n                                                import                          \n                                                metadata                        \n                                                as well.                        \n                       Python class                                                                   \n  python_class_name    ImportFileModule                 \n                        python_module_name   kiara_plugin.onboarding.modul\u2026   \n                        full_name            kiara_plugin.onboarding.modul\u2026   \n                       Processing source code  \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500  \n                       class ImportFileModule(KiaraModule):                  \n \"\"\"A generic module to import a file from any \u2026   \n     _module_type_name = \"import.file\"                 \n     _config_cls = ImportFileConfig                    \n def create_inputs_schema(                         \n         self,                                         \n     ) -&gt; ValueMapSchema:                              \n         result: Dict[str, Dict[str, Any]] = {         \n \"location\": {                             \n \"type\": \"string\",                     \n \"doc\": \"The uri (url/path/...) of \u2026   \n             }                                         \n         }                                             \n # if not self.get_config_value(\"import_met\u2026   \n #     result[\"import_metadata\"] = {           \n #         \"type\": \"dict\",                     \n #         \"doc\": \"Metadata you want to att\u2026   \n #         \"optional\": True,                   \n #     }                                       \n return result                                 \n def create_outputs_schema(                        \n         self,                                         \n     ) -&gt; ValueMapSchema:                              \n         result = {                                    \n \"file\": {                                 \n \"type\": \"file\",                       \n \"doc\": \"The imported file.\",          \n             }                                         \n         }                                             \n if self.get_config_value(\"import_metadata\"\u2026   \n             result[\"import_metadata\"] = {             \n \"type\": \"dict\",                       \n \"doc\": \"Metadata about the import \u2026   \n             }                                         \n return result                                 \n def process(self, inputs: ValueMap, outputs: V\u2026   \n         location = inputs.get_value_data(\"location\u2026   \n         import_metadata = self.get_config_value(\"i\u2026   \n if not location:                              \n raise KiaraProcessingException(\"Invali\u2026   \n if os.path.exists(location):                  \n if os.path.isdir(os.path.realpath(loca\u2026   \n raise KiaraProcessingException(       \n f\"Invalid location input: {loc\u2026   \n                 )                                     \n else:                                     \n                 import_type: str = \"local_file\"       \n elif location.startswith(\"http\"):             \n             import_type = \"http\"                      \n else:                                         \n raise KiaraProcessingException(           \n f\"Can't determine input type for f\u2026   \n             )                                         \n         func_name = f\"import_{import_type}\"           \n         func = getattr(self, func_name)               \n         result_file, metadata = func(location)        \n         outputs.set_value(\"file\", result_file)        \n if import_metadata:                           \n             outputs.set_value(\"import_metadata\", m\u2026   \n def import_local_file(self, location: str) -&gt; \u2026   \n \"\"\"Import a file from a local location.\"\"\"    \n raise NotImplementedError()                   \n def import_http(self, location: str) -&gt; Tuple[\u2026   \n \"\"\"Download a file from a http location.\"\"\"   \n raise NotImplementedError()                   \n   \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500  \n                                                                                \n</pre>"},{"location":"info/module_types/#kiara_info.module_types.import.file_bundle","title":"<code>import.file_bundle</code>","text":"<pre>                                                                                \n Documentation                                                                  \n    A generic module to import a file bundle from any     \n                          local or remote location.                             \n                       Author(s)                                                                      \n    Markus Binsteiner   markus@frkl.io                    \n Context                                                                        \n  Tags         onboarding                               \n                        Labels       package: kiara_plugin.onboarding         \n                        References   source_repo:                             \n                       https://github.com/DHARPA-Project/kia\u2026   \n documentation:                           \n                       https://DHARPA-Project.github.io/kiar\u2026   \n Module config schema                                                           \n  Field       Type      Descrip\u2026   Required   Default   \n   \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500  \n                          constants   object    Value      no                   \n                                                constan\u2026                        \n                                                for this                        \n                                                module.                         \n                          defaults    object    Value      no                   \n                                                defaults                        \n                                                for this                        \n                                                module.                         \n                          import_m\u2026   boolean   Whether    no         true      \n                                                to                              \n                                                return                          \n                                                the                             \n                                                import                          \n                                                metadata                        \n                                                as well.                        \n                       Python class                                                                   \n  python_class_name    ImportFileBundleModule           \n                        python_module_name   kiara_plugin.onboarding.modul\u2026   \n                        full_name            kiara_plugin.onboarding.modul\u2026   \n                       Processing source code  \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500  \n                       class ImportFileBundleModule(KiaraModule):            \n \"\"\"A generic module to import a file bundle fr\u2026   \n     _module_type_name = \"import.file_bundle\"          \n     _config_cls = ImportFileBundleConfig              \n def create_inputs_schema(                         \n         self,                                         \n     ) -&gt; ValueMapSchema:                              \n         result: Dict[str, Dict[str, Any]] = {         \n \"uri\": {                                  \n \"type\": \"string\",                     \n \"doc\": \"The uri (url/path/...) of \u2026   \n             }                                         \n         }                                             \n if self.get_config_value(\"import_metadata\"\u2026   \n             result[\"import_metadata\"] = {             \n \"type\": \"dict\",                       \n \"doc\": \"Metadata you want to attac\u2026   \n \"optional\": True,                     \n             }                                         \n return result                                 \n def create_outputs_schema(                        \n         self,                                         \n     ) -&gt; ValueMapSchema:                              \n         result = {                                    \n \"file_bundle\": {                          \n \"type\": \"file_bundle\",                \n \"doc\": \"The imported file bundle.\",   \n             }                                         \n         }                                             \n if self.get_config_value(\"import_metadata\"\u2026   \n             result[\"import_metadata\"] = {             \n \"type\": \"dict\",                       \n \"doc\": \"Metadata about the import \u2026   \n             }                                         \n return result                                 \n def process(self, inputs: ValueMap, outputs: V\u2026   \n pass                                          \n   \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500  \n                                                                                \n</pre>"},{"location":"info/module_types/#kiara_info.module_types.onboard.zenodo_record","title":"<code>onboard.zenodo_record</code>","text":"<pre>                                                                                \n Documentation                                                                  \n    Download a dataset from zenodo.org.                   \n                       Author(s)                                                                      \n    Markus Binsteiner   markus@frkl.io                    \n Context                                                                        \n  Tags         onboarding                               \n                        Labels       package: kiara_plugin.onboarding         \n                        References   source_repo:                             \n                       https://github.com/DHARPA-Project/kia\u2026   \n documentation:                           \n                       https://DHARPA-Project.github.io/kiar\u2026   \n Module config schema                                                           \n  Field      Type     Descript\u2026   Required   Default    \n   \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500  \n                          constan\u2026   object   Value       no                    \n                                              constants                         \n                                              for this                          \n                                              module.                           \n                          defaults   object   Value       no                    \n                                              defaults                          \n                                              for this                          \n                                              module.                           \n                          metadat\u2026   string   The         no         \"metada\u2026   \n                                              filename                          \n                                              for the                           \n                                              zenodo                            \n                                              metadata.                         \n                       Python class                                                                   \n  python_class_name    ZenodoDownload                   \n                        python_module_name   kiara_plugin.onboarding.modul\u2026   \n                        full_name            kiara_plugin.onboarding.modul\u2026   \n                       Processing source code  \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500  \n                       class ZenodoDownload(KiaraModule):                    \n \"\"\"Download a dataset from zenodo.org.\"\"\"         \n     _module_type_name = \"onboard.zenodo_record\"       \n     _config_cls = ZenodoDownloadConfig                \n def create_inputs_schema(                         \n         self,                                         \n     ) -&gt; ValueMapSchema:                              \n         metadata_filename = self.get_config_value(\u2026   \n return {                                      \n \"doi\": {\"type\": \"string\", \"doc\": \"The \u2026   \n \"include_metadata\": {                     \n \"type\": \"boolean\",                    \n \"doc\": f\"Whether to write the reco\u2026   \n \"default\": True,                      \n             },                                        \n         }                                             \n def create_outputs_schema(                        \n         self,                                         \n     ) -&gt; ValueMapSchema:                              \n return {                                      \n \"file_bundle\": {                          \n \"type\": \"file_bundle\",                \n             }                                         \n         }                                             \n def download_file(self, file_data: Mapping[str\u2026   \n import httpx                                  \n         url = file_data[\"links\"][\"self\"]              \n         file_name = file_data[\"key\"]                  \n         checksum = file_data[\"checksum\"][4:]          \n         target_file = target_path / file_name         \n if target_file.exists():                      \n raise KiaraProcessingException(           \n f\"Can't download file, target path\u2026   \n             )                                         \n         hash_md5 = hashlib.md5()  # noqa              \n with open(target_file, \"ab\") as file2:        \n with httpx.Client() as client:            \n with client.stream(\"GET\", url) as \u2026   \n for chunk in resp.iter_bytes():   \n                         hash_md5.update(chunk)        \n                         file2.write(chunk)            \n if checksum != hash_md5.hexdigest():          \n raise KiaraProcessingException(           \n f\"Can't downloda file '{file_name}\u2026   \n             )                                         \n return target_file                            \n def process(self, inputs: ValueMap, outputs: V\u2026   \n import pyzenodo3                              \n         include_metadata = inputs.get_value_data(\"\u2026   \n         doi = inputs.get_value_data(\"doi\")            \n         zen = pyzenodo3.Zenodo()                      \n         record = zen.find_record_by_doi(doi)          \n         path = FileBundle.create_tmp_dir()            \n         shutil.rmtree(path, ignore_errors=True)       \n         path.mkdir()                                  \n for file_data in record.data[\"files\"]:        \n             self.download_file(file_data, path)       \n if include_metadata:                          \n             metadata_filename = self.get_config_va\u2026   \n             metadata_file = path / metadata_filena\u2026   \n             metadata_file.write_bytes(orjson.dumps\u2026   \n         bundle = FileBundle.import_folder(path.as_\u2026   \n         outputs.set_value(\"file_bundle\", bundle)      \n   \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500  \n                                                                                \n</pre>"},{"location":"info/operations/","title":"operations","text":""},{"location":"info/operations/#kiara_info.operations.download.file","title":"<code>download.file</code>","text":"Documentation <p>Download a single file from a remote location.</p> <p>The result of this operation is a single value of type 'file' (basically an array of raw bytes), which can then be used in other modules to create more meaningful data structures.</p> Inputs field name type description required default url string The url of the file to download. yes file_name string The file name to use for the downloaded file. no Outputs field name type description required default file file The downloaded file. yes download_metadata dict Metadata about the download. yes"},{"location":"info/operations/#kiara_info.operations.download.file_bundle","title":"<code>download.file_bundle</code>","text":"Documentation <p>-- n/a --</p> Inputs field name type description required default url string The url of an archive/zip file to download. yes sub_path string A relative path to select only a sub-folder from the archive. no Outputs field name type description required default file_bundle file_bundle The downloaded file bundle. yes download_metadata dict Metadata about the download. yes"},{"location":"info/operations/#kiara_info.operations.import.file","title":"<code>import.file</code>","text":"Documentation <p>A generic module to import a file from any local or remote location.</p> Inputs field name type description required default location string The uri (url/path/...) of the file to import. yes Outputs field name type description required default file file The imported file. yes import_metadata dict Metadata about the import and file. yes"},{"location":"info/operations/#kiara_info.operations.import.file_bundle","title":"<code>import.file_bundle</code>","text":"Documentation <p>A generic module to import a file bundle from any local or remote location.</p> Inputs field name type description required default uri string The uri (url/path/...) of the file to import. yes import_metadata dict Metadata you want to attach to the file bundle. no Outputs field name type description required default file_bundle file_bundle The imported file bundle. yes import_metadata dict Metadata about the import and file bundle. yes"},{"location":"info/operations/#kiara_info.operations.onboard.zenodo_record","title":"<code>onboard.zenodo_record</code>","text":"Documentation <p>Download a dataset from zenodo.org.</p> Inputs field name type description required default doi string The doi of the record yes include_metadata boolean Whether to write the record metadata to a file 'metadata.json' and include it in the resulting file bundle. no True Outputs field name type description required default file_bundle file_bundle -- n/a -- yes"},{"location":"reference/SUMMARY/","title":"SUMMARY","text":"<ul> <li>kiara_plugin<ul> <li>onboarding<ul> <li>data_types</li> <li>models</li> <li>modules<ul> <li>files<ul> <li>import_file</li> <li>import_file_bundle</li> </ul> </li> <li>zenodo</li> </ul> </li> <li>pipelines</li> <li>utils<ul> <li>download</li> </ul> </li> </ul> </li> </ul> </li> </ul>"},{"location":"reference/kiara_plugin/onboarding/__init__/","title":"onboarding","text":"<p>Top-level package for kiara_plugin.onboarding.</p>"},{"location":"reference/kiara_plugin/onboarding/__init__/#kiara_plugin.onboarding-attributes","title":"Attributes","text":""},{"location":"reference/kiara_plugin/onboarding/__init__/#kiara_plugin.onboarding.KIARA_METADATA","title":"<code>KIARA_METADATA = {'authors': [{'name': __author__, 'email': __email__}], 'description': 'Kiara modules for: onboarding', 'references': {'source_repo': {'desc': 'The module package git repository.', 'url': 'https://github.com/DHARPA-Project/kiara_plugin.onboarding'}, 'documentation': {'desc': 'The url for the module package documentation.', 'url': 'https://DHARPA-Project.github.io/kiara_plugin.onboarding/'}}, 'tags': ['onboarding'], 'labels': {'package': 'kiara_plugin.onboarding'}}</code>  <code>module-attribute</code>","text":""},{"location":"reference/kiara_plugin/onboarding/__init__/#kiara_plugin.onboarding.find_modules","title":"<code>find_modules: KiaraEntryPointItem = (find_kiara_modules_under, 'kiara_plugin.onboarding.modules')</code>  <code>module-attribute</code>","text":""},{"location":"reference/kiara_plugin/onboarding/__init__/#kiara_plugin.onboarding.find_model_classes","title":"<code>find_model_classes: KiaraEntryPointItem = (find_kiara_model_classes_under, 'kiara_plugin.onboarding.models')</code>  <code>module-attribute</code>","text":""},{"location":"reference/kiara_plugin/onboarding/__init__/#kiara_plugin.onboarding.find_data_types","title":"<code>find_data_types: KiaraEntryPointItem = (find_data_types_under, 'kiara_plugin.onboarding.data_types')</code>  <code>module-attribute</code>","text":""},{"location":"reference/kiara_plugin/onboarding/__init__/#kiara_plugin.onboarding.find_pipelines","title":"<code>find_pipelines: KiaraEntryPointItem = (find_pipeline_base_path_for_module, 'kiara_plugin.onboarding.pipelines', KIARA_METADATA)</code>  <code>module-attribute</code>","text":""},{"location":"reference/kiara_plugin/onboarding/__init__/#kiara_plugin.onboarding-functions","title":"Functions","text":""},{"location":"reference/kiara_plugin/onboarding/__init__/#kiara_plugin.onboarding.get_version","title":"<code>get_version()</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/kiara_plugin/onboarding/__init__.py</code> <pre><code>def get_version():\n    from pkg_resources import DistributionNotFound, get_distribution\n\n    try:\n        # Change here if project is renamed and does not equal the package name\n        dist_name = __name__\n        __version__ = get_distribution(dist_name).version\n    except DistributionNotFound:\n\n        try:\n            version_file = os.path.join(os.path.dirname(__file__), \"version.txt\")\n\n            if os.path.exists(version_file):\n                with open(version_file, encoding=\"utf-8\") as vf:\n                    __version__ = vf.read()\n            else:\n                __version__ = \"unknown\"\n\n        except (Exception):\n            pass\n\n        if __version__ is None:\n            __version__ = \"unknown\"\n\n    return __version__\n</code></pre>"},{"location":"reference/kiara_plugin/onboarding/data_types/","title":"data_types","text":"<p>This module contains the value type classes that are used in the <code>kiara_plugin.onboarding</code> package.</p>"},{"location":"reference/kiara_plugin/onboarding/models/","title":"models","text":"<p>This module contains the metadata (and other) models that are used in the <code>kiara_plugin.onboarding</code> package.</p> <p>Those models are convenience wrappers that make it easier for kiara to find, create, manage and version metadata -- but also other type of models -- that is attached to data, as well as kiara modules.</p> <p>Metadata models must be a sub-class of kiara.metadata.MetadataModel. Other models usually sub-class a pydantic BaseModel or implement custom base classes.</p>"},{"location":"reference/kiara_plugin/onboarding/modules/__init__/","title":"modules","text":""},{"location":"reference/kiara_plugin/onboarding/modules/zenodo/","title":"zenodo","text":""},{"location":"reference/kiara_plugin/onboarding/modules/zenodo/#kiara_plugin.onboarding.modules.zenodo-classes","title":"Classes","text":""},{"location":"reference/kiara_plugin/onboarding/modules/zenodo/#kiara_plugin.onboarding.modules.zenodo.ZenodoDownloadConfig","title":"<code>ZenodoDownloadConfig</code>","text":"<p>         Bases: <code>KiaraModuleConfig</code></p> Source code in <code>/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/kiara_plugin/onboarding/modules/zenodo.py</code> <pre><code>class ZenodoDownloadConfig(KiaraModuleConfig):\n\n    metadata_filename: str = Field(\n        description=\"The filename for the zenodo metadata.\", default=\"metadata.json\"\n    )\n</code></pre>"},{"location":"reference/kiara_plugin/onboarding/modules/zenodo/#kiara_plugin.onboarding.modules.zenodo.ZenodoDownloadConfig-attributes","title":"Attributes","text":""},{"location":"reference/kiara_plugin/onboarding/modules/zenodo/#kiara_plugin.onboarding.modules.zenodo.ZenodoDownloadConfig.metadata_filename","title":"<code>metadata_filename: str = Field(description='The filename for the zenodo metadata.', default='metadata.json')</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"reference/kiara_plugin/onboarding/modules/zenodo/#kiara_plugin.onboarding.modules.zenodo.ZenodoDownload","title":"<code>ZenodoDownload</code>","text":"<p>         Bases: <code>KiaraModule</code></p> <p>Download a dataset from zenodo.org.</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/kiara_plugin/onboarding/modules/zenodo.py</code> <pre><code>class ZenodoDownload(KiaraModule):\n\"\"\"Download a dataset from zenodo.org.\"\"\"\n\n    _module_type_name = \"onboard.zenodo_record\"\n    _config_cls = ZenodoDownloadConfig\n\n    def create_inputs_schema(\n        self,\n    ) -&gt; ValueMapSchema:\n\n        metadata_filename = self.get_config_value(\"metadata_filename\")\n        return {\n            \"doi\": {\"type\": \"string\", \"doc\": \"The doi of the record\"},\n            \"include_metadata\": {\n                \"type\": \"boolean\",\n                \"doc\": f\"Whether to write the record metadata to a file '{metadata_filename}' and include it in the resulting file bundle.\",\n                \"default\": True,\n            },\n        }\n\n    def create_outputs_schema(\n        self,\n    ) -&gt; ValueMapSchema:\n\n        return {\n            \"file_bundle\": {\n                \"type\": \"file_bundle\",\n            }\n        }\n\n    def download_file(self, file_data: Mapping[str, Any], target_path: Path):\n\n        import httpx\n\n        url = file_data[\"links\"][\"self\"]\n        file_name = file_data[\"key\"]\n        checksum = file_data[\"checksum\"][4:]\n\n        target_file = target_path / file_name\n\n        if target_file.exists():\n            raise KiaraProcessingException(\n                f\"Can't download file, target path already exists: {target_path.as_posix()}.\"\n            )\n\n        hash_md5 = hashlib.md5()  # noqa\n\n        with open(target_file, \"ab\") as file2:\n            with httpx.Client() as client:\n                with client.stream(\"GET\", url) as resp:\n                    for chunk in resp.iter_bytes():\n                        hash_md5.update(chunk)\n                        file2.write(chunk)\n\n        if checksum != hash_md5.hexdigest():\n            raise KiaraProcessingException(\n                f\"Can't downloda file '{file_name}', invalid checksum: {checksum} != {hash_md5.hexdigest()}\"\n            )\n\n        return target_file\n\n    def process(self, inputs: ValueMap, outputs: ValueMap):\n\n        import pyzenodo3\n\n        include_metadata = inputs.get_value_data(\"include_metadata\")\n\n        doi = inputs.get_value_data(\"doi\")\n        zen = pyzenodo3.Zenodo()\n\n        record = zen.find_record_by_doi(doi)\n\n        path = FileBundle.create_tmp_dir()\n        shutil.rmtree(path, ignore_errors=True)\n        path.mkdir()\n        for file_data in record.data[\"files\"]:\n            self.download_file(file_data, path)\n\n        if include_metadata:\n            metadata_filename = self.get_config_value(\"metadata_filename\")\n            metadata_file = path / metadata_filename\n            metadata_file.write_bytes(orjson.dumps(record.data))\n\n        bundle = FileBundle.import_folder(path.as_posix())\n        outputs.set_value(\"file_bundle\", bundle)\n</code></pre>"},{"location":"reference/kiara_plugin/onboarding/modules/zenodo/#kiara_plugin.onboarding.modules.zenodo.ZenodoDownload-attributes","title":"Attributes","text":""},{"location":"reference/kiara_plugin/onboarding/modules/zenodo/#kiara_plugin.onboarding.modules.zenodo.ZenodoDownload._config_cls","title":"<code>_config_cls = ZenodoDownloadConfig</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"reference/kiara_plugin/onboarding/modules/zenodo/#kiara_plugin.onboarding.modules.zenodo.ZenodoDownload-functions","title":"Functions","text":""},{"location":"reference/kiara_plugin/onboarding/modules/zenodo/#kiara_plugin.onboarding.modules.zenodo.ZenodoDownload.create_inputs_schema","title":"<code>create_inputs_schema() -&gt; ValueMapSchema</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/kiara_plugin/onboarding/modules/zenodo.py</code> <pre><code>def create_inputs_schema(\n    self,\n) -&gt; ValueMapSchema:\n\n    metadata_filename = self.get_config_value(\"metadata_filename\")\n    return {\n        \"doi\": {\"type\": \"string\", \"doc\": \"The doi of the record\"},\n        \"include_metadata\": {\n            \"type\": \"boolean\",\n            \"doc\": f\"Whether to write the record metadata to a file '{metadata_filename}' and include it in the resulting file bundle.\",\n            \"default\": True,\n        },\n    }\n</code></pre>"},{"location":"reference/kiara_plugin/onboarding/modules/zenodo/#kiara_plugin.onboarding.modules.zenodo.ZenodoDownload.create_outputs_schema","title":"<code>create_outputs_schema() -&gt; ValueMapSchema</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/kiara_plugin/onboarding/modules/zenodo.py</code> <pre><code>def create_outputs_schema(\n    self,\n) -&gt; ValueMapSchema:\n\n    return {\n        \"file_bundle\": {\n            \"type\": \"file_bundle\",\n        }\n    }\n</code></pre>"},{"location":"reference/kiara_plugin/onboarding/modules/zenodo/#kiara_plugin.onboarding.modules.zenodo.ZenodoDownload.download_file","title":"<code>download_file(file_data: Mapping[str, Any], target_path: Path)</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/kiara_plugin/onboarding/modules/zenodo.py</code> <pre><code>def download_file(self, file_data: Mapping[str, Any], target_path: Path):\n\n    import httpx\n\n    url = file_data[\"links\"][\"self\"]\n    file_name = file_data[\"key\"]\n    checksum = file_data[\"checksum\"][4:]\n\n    target_file = target_path / file_name\n\n    if target_file.exists():\n        raise KiaraProcessingException(\n            f\"Can't download file, target path already exists: {target_path.as_posix()}.\"\n        )\n\n    hash_md5 = hashlib.md5()  # noqa\n\n    with open(target_file, \"ab\") as file2:\n        with httpx.Client() as client:\n            with client.stream(\"GET\", url) as resp:\n                for chunk in resp.iter_bytes():\n                    hash_md5.update(chunk)\n                    file2.write(chunk)\n\n    if checksum != hash_md5.hexdigest():\n        raise KiaraProcessingException(\n            f\"Can't downloda file '{file_name}', invalid checksum: {checksum} != {hash_md5.hexdigest()}\"\n        )\n\n    return target_file\n</code></pre>"},{"location":"reference/kiara_plugin/onboarding/modules/zenodo/#kiara_plugin.onboarding.modules.zenodo.ZenodoDownload.process","title":"<code>process(inputs: ValueMap, outputs: ValueMap)</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/kiara_plugin/onboarding/modules/zenodo.py</code> <pre><code>def process(self, inputs: ValueMap, outputs: ValueMap):\n\n    import pyzenodo3\n\n    include_metadata = inputs.get_value_data(\"include_metadata\")\n\n    doi = inputs.get_value_data(\"doi\")\n    zen = pyzenodo3.Zenodo()\n\n    record = zen.find_record_by_doi(doi)\n\n    path = FileBundle.create_tmp_dir()\n    shutil.rmtree(path, ignore_errors=True)\n    path.mkdir()\n    for file_data in record.data[\"files\"]:\n        self.download_file(file_data, path)\n\n    if include_metadata:\n        metadata_filename = self.get_config_value(\"metadata_filename\")\n        metadata_file = path / metadata_filename\n        metadata_file.write_bytes(orjson.dumps(record.data))\n\n    bundle = FileBundle.import_folder(path.as_posix())\n    outputs.set_value(\"file_bundle\", bundle)\n</code></pre>"},{"location":"reference/kiara_plugin/onboarding/modules/files/__init__/","title":"files","text":""},{"location":"reference/kiara_plugin/onboarding/modules/files/__init__/#kiara_plugin.onboarding.modules.files-classes","title":"Classes","text":""},{"location":"reference/kiara_plugin/onboarding/modules/files/__init__/#kiara_plugin.onboarding.modules.files.DownloadFileConfig","title":"<code>DownloadFileConfig</code>","text":"<p>         Bases: <code>KiaraModuleConfig</code></p> Source code in <code>/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/kiara_plugin/onboarding/modules/files/__init__.py</code> <pre><code>class DownloadFileConfig(KiaraModuleConfig):\n    download_metadata: bool = Field(\n        description=\"Whether to return the download metadata as well.\",\n        default=True,\n    )\n</code></pre>"},{"location":"reference/kiara_plugin/onboarding/modules/files/__init__/#kiara_plugin.onboarding.modules.files.DownloadFileConfig-attributes","title":"Attributes","text":""},{"location":"reference/kiara_plugin/onboarding/modules/files/__init__/#kiara_plugin.onboarding.modules.files.DownloadFileConfig.download_metadata","title":"<code>download_metadata: bool = Field(description='Whether to return the download metadata as well.', default=True)</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"reference/kiara_plugin/onboarding/modules/files/__init__/#kiara_plugin.onboarding.modules.files.DownloadFileModule","title":"<code>DownloadFileModule</code>","text":"<p>         Bases: <code>KiaraModule</code></p> <p>Download a single file from a remote location.</p> <p>The result of this operation is a single value of type 'file' (basically an array of raw bytes), which can then be used in other modules to create more meaningful data structures.</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/kiara_plugin/onboarding/modules/files/__init__.py</code> <pre><code>class DownloadFileModule(KiaraModule):\n\"\"\"Download a single file from a remote location.\n\n    The result of this operation is a single value of type 'file' (basically an array of raw bytes), which can then be used in other modules to\n    create more meaningful data structures.\n    \"\"\"\n\n    _module_type_name = \"download.file\"\n    _config_cls = DownloadFileConfig\n\n    def create_inputs_schema(self) -&gt; ValueMapSchema:\n\n        result: Dict[str, Dict[str, Any]] = {\n            \"url\": {\"type\": \"string\", \"doc\": \"The url of the file to download.\"},\n            \"file_name\": {\n                \"type\": \"string\",\n                \"doc\": \"The file name to use for the downloaded file.\",\n                \"optional\": True,\n            },\n        }\n        return result\n\n    def create_outputs_schema(\n        self,\n    ) -&gt; ValueMapSchema:\n\n        result: Dict[str, Dict[str, Any]] = {\n            \"file\": {\n                \"type\": \"file\",\n                \"doc\": \"The downloaded file.\",\n            }\n        }\n\n        if self.get_config_value(\"download_metadata\"):\n            result[\"download_metadata\"] = {\n                \"type\": \"dict\",\n                \"doc\": \"Metadata about the download.\",\n            }\n        return result\n\n    def process(self, inputs: ValueMap, outputs: ValueMap):\n\n        url = inputs.get_value_data(\"url\")\n        file_name = inputs.get_value_data(\"file_name\")\n\n        result_file, metadata = download_file(url=url, file_name=file_name)\n\n        outputs.set_value(\"download_metadata\", metadata)\n        outputs.set_value(\"file\", result_file)\n</code></pre>"},{"location":"reference/kiara_plugin/onboarding/modules/files/__init__/#kiara_plugin.onboarding.modules.files.DownloadFileModule-attributes","title":"Attributes","text":""},{"location":"reference/kiara_plugin/onboarding/modules/files/__init__/#kiara_plugin.onboarding.modules.files.DownloadFileModule._config_cls","title":"<code>_config_cls = DownloadFileConfig</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"reference/kiara_plugin/onboarding/modules/files/__init__/#kiara_plugin.onboarding.modules.files.DownloadFileModule-functions","title":"Functions","text":""},{"location":"reference/kiara_plugin/onboarding/modules/files/__init__/#kiara_plugin.onboarding.modules.files.DownloadFileModule.create_inputs_schema","title":"<code>create_inputs_schema() -&gt; ValueMapSchema</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/kiara_plugin/onboarding/modules/files/__init__.py</code> <pre><code>def create_inputs_schema(self) -&gt; ValueMapSchema:\n\n    result: Dict[str, Dict[str, Any]] = {\n        \"url\": {\"type\": \"string\", \"doc\": \"The url of the file to download.\"},\n        \"file_name\": {\n            \"type\": \"string\",\n            \"doc\": \"The file name to use for the downloaded file.\",\n            \"optional\": True,\n        },\n    }\n    return result\n</code></pre>"},{"location":"reference/kiara_plugin/onboarding/modules/files/__init__/#kiara_plugin.onboarding.modules.files.DownloadFileModule.create_outputs_schema","title":"<code>create_outputs_schema() -&gt; ValueMapSchema</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/kiara_plugin/onboarding/modules/files/__init__.py</code> <pre><code>def create_outputs_schema(\n    self,\n) -&gt; ValueMapSchema:\n\n    result: Dict[str, Dict[str, Any]] = {\n        \"file\": {\n            \"type\": \"file\",\n            \"doc\": \"The downloaded file.\",\n        }\n    }\n\n    if self.get_config_value(\"download_metadata\"):\n        result[\"download_metadata\"] = {\n            \"type\": \"dict\",\n            \"doc\": \"Metadata about the download.\",\n        }\n    return result\n</code></pre>"},{"location":"reference/kiara_plugin/onboarding/modules/files/__init__/#kiara_plugin.onboarding.modules.files.DownloadFileModule.process","title":"<code>process(inputs: ValueMap, outputs: ValueMap)</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/kiara_plugin/onboarding/modules/files/__init__.py</code> <pre><code>def process(self, inputs: ValueMap, outputs: ValueMap):\n\n    url = inputs.get_value_data(\"url\")\n    file_name = inputs.get_value_data(\"file_name\")\n\n    result_file, metadata = download_file(url=url, file_name=file_name)\n\n    outputs.set_value(\"download_metadata\", metadata)\n    outputs.set_value(\"file\", result_file)\n</code></pre>"},{"location":"reference/kiara_plugin/onboarding/modules/files/__init__/#kiara_plugin.onboarding.modules.files.DownloadFileBundleModule","title":"<code>DownloadFileBundleModule</code>","text":"<p>         Bases: <code>KiaraModule</code></p> Source code in <code>/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/kiara_plugin/onboarding/modules/files/__init__.py</code> <pre><code>class DownloadFileBundleModule(KiaraModule):\n    _module_type_name = \"download.file_bundle\"\n    _config_cls = DownloadFileConfig\n\n    def create_inputs_schema(self) -&gt; ValueMapSchema:\n\n        result: Dict[str, Dict[str, Any]] = {\n            \"url\": {\n                \"type\": \"string\",\n                \"doc\": \"The url of an archive/zip file to download.\",\n            },\n            \"sub_path\": {\n                \"type\": \"string\",\n                \"doc\": \"A relative path to select only a sub-folder from the archive.\",\n                \"optional\": True,\n            },\n        }\n\n        return result\n\n    def create_outputs_schema(\n        self,\n    ) -&gt; ValueMapSchema:\n\n        result: Dict[str, Dict[str, Any]] = {\n            \"file_bundle\": {\n                \"type\": \"file_bundle\",\n                \"doc\": \"The downloaded file bundle.\",\n            }\n        }\n\n        if self.get_config_value(\"download_metadata\"):\n            result[\"download_metadata\"] = {\n                \"type\": \"dict\",\n                \"doc\": \"Metadata about the download.\",\n            }\n        return result\n\n    def process(self, inputs: ValueMap, outputs: ValueMap):\n\n        from datetime import datetime\n        from urllib.parse import urlparse\n\n        import httpx\n        import pytz\n\n        url = inputs.get_value_data(\"url\")\n        suffix = None\n        try:\n            parsed_url = urlparse(url)\n            _, suffix = os.path.splitext(parsed_url.path)\n        except Exception:\n            pass\n        if not suffix:\n            suffix = \"\"\n\n        sub_path: Union[None, str] = inputs.get_value_data(\"sub_path\")\n        tmp_file = tempfile.NamedTemporaryFile(delete=False, suffix=suffix)\n        atexit.register(tmp_file.close)\n\n        history = []\n        datetime.utcnow().replace(tzinfo=pytz.utc)\n        with open(tmp_file.name, \"wb\") as f:\n            with httpx.stream(\"GET\", url, follow_redirects=True) as r:\n                history.append(dict(r.headers))\n                for h in r.history:\n                    history.append(dict(h.headers))\n                for data in r.iter_bytes():\n                    f.write(data)\n\n        out_dir = tempfile.mkdtemp()\n\n        def del_out_dir():\n            shutil.rmtree(out_dir, ignore_errors=True)\n\n        atexit.register(del_out_dir)\n\n        error = None\n        try:\n            shutil.unpack_archive(tmp_file.name, out_dir)\n        except Exception:\n            # try patool, maybe we're lucky\n            try:\n                import patoolib\n\n                patoolib.extract_archive(tmp_file.name, outdir=out_dir)\n            except Exception as e:\n                error = e\n\n        if error is not None:\n            raise KiaraProcessingException(f\"Could not extract archive: {error}.\")\n\n        path = out_dir\n        if sub_path:\n            path = os.path.join(out_dir, sub_path)\n        bundle = FileBundle.import_folder(path)\n\n        metadata = {\n            \"response_headers\": history,\n            \"request_time\": datetime.utcnow().replace(tzinfo=pytz.utc).isoformat(),\n        }\n        outputs.set_value(\"download_metadata\", metadata)\n        outputs.set_value(\"file_bundle\", bundle)\n</code></pre>"},{"location":"reference/kiara_plugin/onboarding/modules/files/__init__/#kiara_plugin.onboarding.modules.files.DownloadFileBundleModule-attributes","title":"Attributes","text":""},{"location":"reference/kiara_plugin/onboarding/modules/files/__init__/#kiara_plugin.onboarding.modules.files.DownloadFileBundleModule._config_cls","title":"<code>_config_cls = DownloadFileConfig</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"reference/kiara_plugin/onboarding/modules/files/__init__/#kiara_plugin.onboarding.modules.files.DownloadFileBundleModule-functions","title":"Functions","text":""},{"location":"reference/kiara_plugin/onboarding/modules/files/__init__/#kiara_plugin.onboarding.modules.files.DownloadFileBundleModule.create_inputs_schema","title":"<code>create_inputs_schema() -&gt; ValueMapSchema</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/kiara_plugin/onboarding/modules/files/__init__.py</code> <pre><code>def create_inputs_schema(self) -&gt; ValueMapSchema:\n\n    result: Dict[str, Dict[str, Any]] = {\n        \"url\": {\n            \"type\": \"string\",\n            \"doc\": \"The url of an archive/zip file to download.\",\n        },\n        \"sub_path\": {\n            \"type\": \"string\",\n            \"doc\": \"A relative path to select only a sub-folder from the archive.\",\n            \"optional\": True,\n        },\n    }\n\n    return result\n</code></pre>"},{"location":"reference/kiara_plugin/onboarding/modules/files/__init__/#kiara_plugin.onboarding.modules.files.DownloadFileBundleModule.create_outputs_schema","title":"<code>create_outputs_schema() -&gt; ValueMapSchema</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/kiara_plugin/onboarding/modules/files/__init__.py</code> <pre><code>def create_outputs_schema(\n    self,\n) -&gt; ValueMapSchema:\n\n    result: Dict[str, Dict[str, Any]] = {\n        \"file_bundle\": {\n            \"type\": \"file_bundle\",\n            \"doc\": \"The downloaded file bundle.\",\n        }\n    }\n\n    if self.get_config_value(\"download_metadata\"):\n        result[\"download_metadata\"] = {\n            \"type\": \"dict\",\n            \"doc\": \"Metadata about the download.\",\n        }\n    return result\n</code></pre>"},{"location":"reference/kiara_plugin/onboarding/modules/files/__init__/#kiara_plugin.onboarding.modules.files.DownloadFileBundleModule.process","title":"<code>process(inputs: ValueMap, outputs: ValueMap)</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/kiara_plugin/onboarding/modules/files/__init__.py</code> <pre><code>def process(self, inputs: ValueMap, outputs: ValueMap):\n\n    from datetime import datetime\n    from urllib.parse import urlparse\n\n    import httpx\n    import pytz\n\n    url = inputs.get_value_data(\"url\")\n    suffix = None\n    try:\n        parsed_url = urlparse(url)\n        _, suffix = os.path.splitext(parsed_url.path)\n    except Exception:\n        pass\n    if not suffix:\n        suffix = \"\"\n\n    sub_path: Union[None, str] = inputs.get_value_data(\"sub_path\")\n    tmp_file = tempfile.NamedTemporaryFile(delete=False, suffix=suffix)\n    atexit.register(tmp_file.close)\n\n    history = []\n    datetime.utcnow().replace(tzinfo=pytz.utc)\n    with open(tmp_file.name, \"wb\") as f:\n        with httpx.stream(\"GET\", url, follow_redirects=True) as r:\n            history.append(dict(r.headers))\n            for h in r.history:\n                history.append(dict(h.headers))\n            for data in r.iter_bytes():\n                f.write(data)\n\n    out_dir = tempfile.mkdtemp()\n\n    def del_out_dir():\n        shutil.rmtree(out_dir, ignore_errors=True)\n\n    atexit.register(del_out_dir)\n\n    error = None\n    try:\n        shutil.unpack_archive(tmp_file.name, out_dir)\n    except Exception:\n        # try patool, maybe we're lucky\n        try:\n            import patoolib\n\n            patoolib.extract_archive(tmp_file.name, outdir=out_dir)\n        except Exception as e:\n            error = e\n\n    if error is not None:\n        raise KiaraProcessingException(f\"Could not extract archive: {error}.\")\n\n    path = out_dir\n    if sub_path:\n        path = os.path.join(out_dir, sub_path)\n    bundle = FileBundle.import_folder(path)\n\n    metadata = {\n        \"response_headers\": history,\n        \"request_time\": datetime.utcnow().replace(tzinfo=pytz.utc).isoformat(),\n    }\n    outputs.set_value(\"download_metadata\", metadata)\n    outputs.set_value(\"file_bundle\", bundle)\n</code></pre>"},{"location":"reference/kiara_plugin/onboarding/modules/files/__init__/#kiara_plugin.onboarding.modules.files-functions","title":"Functions","text":""},{"location":"reference/kiara_plugin/onboarding/modules/files/import_file/","title":"import_file","text":""},{"location":"reference/kiara_plugin/onboarding/modules/files/import_file/#kiara_plugin.onboarding.modules.files.import_file-classes","title":"Classes","text":""},{"location":"reference/kiara_plugin/onboarding/modules/files/import_file/#kiara_plugin.onboarding.modules.files.import_file.ImportFileConfig","title":"<code>ImportFileConfig</code>","text":"<p>         Bases: <code>KiaraModuleConfig</code></p> Source code in <code>/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/kiara_plugin/onboarding/modules/files/import_file.py</code> <pre><code>class ImportFileConfig(KiaraModuleConfig):\n\n    import_metadata: bool = Field(\n        description=\"Whether to return the import metadata as well.\",\n        default=True,\n    )\n</code></pre>"},{"location":"reference/kiara_plugin/onboarding/modules/files/import_file/#kiara_plugin.onboarding.modules.files.import_file.ImportFileConfig-attributes","title":"Attributes","text":""},{"location":"reference/kiara_plugin/onboarding/modules/files/import_file/#kiara_plugin.onboarding.modules.files.import_file.ImportFileConfig.import_metadata","title":"<code>import_metadata: bool = Field(description='Whether to return the import metadata as well.', default=True)</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"reference/kiara_plugin/onboarding/modules/files/import_file/#kiara_plugin.onboarding.modules.files.import_file.ImportFileModule","title":"<code>ImportFileModule</code>","text":"<p>         Bases: <code>KiaraModule</code></p> <p>A generic module to import a file from any local or remote location.</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/kiara_plugin/onboarding/modules/files/import_file.py</code> <pre><code>class ImportFileModule(KiaraModule):\n\"\"\"A generic module to import a file from any local or remote location.\"\"\"\n\n    _module_type_name = \"import.file\"\n    _config_cls = ImportFileConfig\n\n    def create_inputs_schema(\n        self,\n    ) -&gt; ValueMapSchema:\n\n        result: Dict[str, Dict[str, Any]] = {\n            \"location\": {\n                \"type\": \"string\",\n                \"doc\": \"The uri (url/path/...) of the file to import.\",\n            }\n        }\n        # if not self.get_config_value(\"import_metadata\"):\n        #     result[\"import_metadata\"] = {\n        #         \"type\": \"dict\",\n        #         \"doc\": \"Metadata you want to attach to the file.\",\n        #         \"optional\": True,\n        #     }\n\n        return result\n\n    def create_outputs_schema(\n        self,\n    ) -&gt; ValueMapSchema:\n\n        result = {\n            \"file\": {\n                \"type\": \"file\",\n                \"doc\": \"The imported file.\",\n            }\n        }\n        if self.get_config_value(\"import_metadata\"):\n            result[\"import_metadata\"] = {\n                \"type\": \"dict\",\n                \"doc\": \"Metadata about the import and file.\",\n            }\n        return result\n\n    def process(self, inputs: ValueMap, outputs: ValueMap) -&gt; None:\n\n        location = inputs.get_value_data(\"location\")\n        import_metadata = self.get_config_value(\"import_metadata\")\n\n        if not location:\n            raise KiaraProcessingException(\"Invalid location input: can't be empty.\")\n\n        if os.path.exists(location):\n            if os.path.isdir(os.path.realpath(location)):\n                raise KiaraProcessingException(\n                    f\"Invalid location input: {location} is a directory.\"\n                )\n            else:\n                import_type: str = \"local_file\"\n        elif location.startswith(\"http\"):\n            import_type = \"http\"\n        else:\n            raise KiaraProcessingException(\n                f\"Can't determine input type for file location: {location}.\"\n            )\n\n        func_name = f\"import_{import_type}\"\n        func = getattr(self, func_name)\n\n        result_file, metadata = func(location)\n\n        outputs.set_value(\"file\", result_file)\n        if import_metadata:\n            outputs.set_value(\"import_metadata\", metadata)\n\n    def import_local_file(self, location: str) -&gt; Tuple[FileModel, BaseModel]:\n\"\"\"Import a file from a local location.\"\"\"\n        raise NotImplementedError()\n\n    def import_http(self, location: str) -&gt; Tuple[FileModel, BaseModel]:\n\"\"\"Download a file from a http location.\"\"\"\n        raise NotImplementedError()\n</code></pre>"},{"location":"reference/kiara_plugin/onboarding/modules/files/import_file/#kiara_plugin.onboarding.modules.files.import_file.ImportFileModule-attributes","title":"Attributes","text":""},{"location":"reference/kiara_plugin/onboarding/modules/files/import_file/#kiara_plugin.onboarding.modules.files.import_file.ImportFileModule._config_cls","title":"<code>_config_cls = ImportFileConfig</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"reference/kiara_plugin/onboarding/modules/files/import_file/#kiara_plugin.onboarding.modules.files.import_file.ImportFileModule-functions","title":"Functions","text":""},{"location":"reference/kiara_plugin/onboarding/modules/files/import_file/#kiara_plugin.onboarding.modules.files.import_file.ImportFileModule.create_inputs_schema","title":"<code>create_inputs_schema() -&gt; ValueMapSchema</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/kiara_plugin/onboarding/modules/files/import_file.py</code> <pre><code>def create_inputs_schema(\n    self,\n) -&gt; ValueMapSchema:\n\n    result: Dict[str, Dict[str, Any]] = {\n        \"location\": {\n            \"type\": \"string\",\n            \"doc\": \"The uri (url/path/...) of the file to import.\",\n        }\n    }\n    # if not self.get_config_value(\"import_metadata\"):\n    #     result[\"import_metadata\"] = {\n    #         \"type\": \"dict\",\n    #         \"doc\": \"Metadata you want to attach to the file.\",\n    #         \"optional\": True,\n    #     }\n\n    return result\n</code></pre>"},{"location":"reference/kiara_plugin/onboarding/modules/files/import_file/#kiara_plugin.onboarding.modules.files.import_file.ImportFileModule.create_outputs_schema","title":"<code>create_outputs_schema() -&gt; ValueMapSchema</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/kiara_plugin/onboarding/modules/files/import_file.py</code> <pre><code>def create_outputs_schema(\n    self,\n) -&gt; ValueMapSchema:\n\n    result = {\n        \"file\": {\n            \"type\": \"file\",\n            \"doc\": \"The imported file.\",\n        }\n    }\n    if self.get_config_value(\"import_metadata\"):\n        result[\"import_metadata\"] = {\n            \"type\": \"dict\",\n            \"doc\": \"Metadata about the import and file.\",\n        }\n    return result\n</code></pre>"},{"location":"reference/kiara_plugin/onboarding/modules/files/import_file/#kiara_plugin.onboarding.modules.files.import_file.ImportFileModule.process","title":"<code>process(inputs: ValueMap, outputs: ValueMap) -&gt; None</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/kiara_plugin/onboarding/modules/files/import_file.py</code> <pre><code>def process(self, inputs: ValueMap, outputs: ValueMap) -&gt; None:\n\n    location = inputs.get_value_data(\"location\")\n    import_metadata = self.get_config_value(\"import_metadata\")\n\n    if not location:\n        raise KiaraProcessingException(\"Invalid location input: can't be empty.\")\n\n    if os.path.exists(location):\n        if os.path.isdir(os.path.realpath(location)):\n            raise KiaraProcessingException(\n                f\"Invalid location input: {location} is a directory.\"\n            )\n        else:\n            import_type: str = \"local_file\"\n    elif location.startswith(\"http\"):\n        import_type = \"http\"\n    else:\n        raise KiaraProcessingException(\n            f\"Can't determine input type for file location: {location}.\"\n        )\n\n    func_name = f\"import_{import_type}\"\n    func = getattr(self, func_name)\n\n    result_file, metadata = func(location)\n\n    outputs.set_value(\"file\", result_file)\n    if import_metadata:\n        outputs.set_value(\"import_metadata\", metadata)\n</code></pre>"},{"location":"reference/kiara_plugin/onboarding/modules/files/import_file/#kiara_plugin.onboarding.modules.files.import_file.ImportFileModule.import_local_file","title":"<code>import_local_file(location: str) -&gt; Tuple[FileModel, BaseModel]</code>","text":"<p>Import a file from a local location.</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/kiara_plugin/onboarding/modules/files/import_file.py</code> <pre><code>def import_local_file(self, location: str) -&gt; Tuple[FileModel, BaseModel]:\n\"\"\"Import a file from a local location.\"\"\"\n    raise NotImplementedError()\n</code></pre>"},{"location":"reference/kiara_plugin/onboarding/modules/files/import_file/#kiara_plugin.onboarding.modules.files.import_file.ImportFileModule.import_http","title":"<code>import_http(location: str) -&gt; Tuple[FileModel, BaseModel]</code>","text":"<p>Download a file from a http location.</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/kiara_plugin/onboarding/modules/files/import_file.py</code> <pre><code>def import_http(self, location: str) -&gt; Tuple[FileModel, BaseModel]:\n\"\"\"Download a file from a http location.\"\"\"\n    raise NotImplementedError()\n</code></pre>"},{"location":"reference/kiara_plugin/onboarding/modules/files/import_file_bundle/","title":"import_file_bundle","text":""},{"location":"reference/kiara_plugin/onboarding/modules/files/import_file_bundle/#kiara_plugin.onboarding.modules.files.import_file_bundle-classes","title":"Classes","text":""},{"location":"reference/kiara_plugin/onboarding/modules/files/import_file_bundle/#kiara_plugin.onboarding.modules.files.import_file_bundle.ImportFileBundleConfig","title":"<code>ImportFileBundleConfig</code>","text":"<p>         Bases: <code>KiaraModuleConfig</code></p> Source code in <code>/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/kiara_plugin/onboarding/modules/files/import_file_bundle.py</code> <pre><code>class ImportFileBundleConfig(KiaraModuleConfig):\n\n    import_metadata: bool = Field(\n        description=\"Whether to return the import metadata as well.\",\n        default=True,\n    )\n</code></pre>"},{"location":"reference/kiara_plugin/onboarding/modules/files/import_file_bundle/#kiara_plugin.onboarding.modules.files.import_file_bundle.ImportFileBundleConfig-attributes","title":"Attributes","text":""},{"location":"reference/kiara_plugin/onboarding/modules/files/import_file_bundle/#kiara_plugin.onboarding.modules.files.import_file_bundle.ImportFileBundleConfig.import_metadata","title":"<code>import_metadata: bool = Field(description='Whether to return the import metadata as well.', default=True)</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"reference/kiara_plugin/onboarding/modules/files/import_file_bundle/#kiara_plugin.onboarding.modules.files.import_file_bundle.ImportFileBundleModule","title":"<code>ImportFileBundleModule</code>","text":"<p>         Bases: <code>KiaraModule</code></p> <p>A generic module to import a file bundle from any local or remote location.</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/kiara_plugin/onboarding/modules/files/import_file_bundle.py</code> <pre><code>class ImportFileBundleModule(KiaraModule):\n\"\"\"A generic module to import a file bundle from any local or remote location.\"\"\"\n\n    _module_type_name = \"import.file_bundle\"\n    _config_cls = ImportFileBundleConfig\n\n    def create_inputs_schema(\n        self,\n    ) -&gt; ValueMapSchema:\n\n        result: Dict[str, Dict[str, Any]] = {\n            \"uri\": {\n                \"type\": \"string\",\n                \"doc\": \"The uri (url/path/...) of the file to import.\",\n            }\n        }\n        if self.get_config_value(\"import_metadata\"):\n            result[\"import_metadata\"] = {\n                \"type\": \"dict\",\n                \"doc\": \"Metadata you want to attach to the file bundle.\",\n                \"optional\": True,\n            }\n\n        return result\n\n    def create_outputs_schema(\n        self,\n    ) -&gt; ValueMapSchema:\n\n        result = {\n            \"file_bundle\": {\n                \"type\": \"file_bundle\",\n                \"doc\": \"The imported file bundle.\",\n            }\n        }\n        if self.get_config_value(\"import_metadata\"):\n            result[\"import_metadata\"] = {\n                \"type\": \"dict\",\n                \"doc\": \"Metadata about the import and file bundle.\",\n            }\n        return result\n\n    def process(self, inputs: ValueMap, outputs: ValueMap) -&gt; None:\n        pass\n</code></pre>"},{"location":"reference/kiara_plugin/onboarding/modules/files/import_file_bundle/#kiara_plugin.onboarding.modules.files.import_file_bundle.ImportFileBundleModule-attributes","title":"Attributes","text":""},{"location":"reference/kiara_plugin/onboarding/modules/files/import_file_bundle/#kiara_plugin.onboarding.modules.files.import_file_bundle.ImportFileBundleModule._config_cls","title":"<code>_config_cls = ImportFileBundleConfig</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"reference/kiara_plugin/onboarding/modules/files/import_file_bundle/#kiara_plugin.onboarding.modules.files.import_file_bundle.ImportFileBundleModule-functions","title":"Functions","text":""},{"location":"reference/kiara_plugin/onboarding/modules/files/import_file_bundle/#kiara_plugin.onboarding.modules.files.import_file_bundle.ImportFileBundleModule.create_inputs_schema","title":"<code>create_inputs_schema() -&gt; ValueMapSchema</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/kiara_plugin/onboarding/modules/files/import_file_bundle.py</code> <pre><code>def create_inputs_schema(\n    self,\n) -&gt; ValueMapSchema:\n\n    result: Dict[str, Dict[str, Any]] = {\n        \"uri\": {\n            \"type\": \"string\",\n            \"doc\": \"The uri (url/path/...) of the file to import.\",\n        }\n    }\n    if self.get_config_value(\"import_metadata\"):\n        result[\"import_metadata\"] = {\n            \"type\": \"dict\",\n            \"doc\": \"Metadata you want to attach to the file bundle.\",\n            \"optional\": True,\n        }\n\n    return result\n</code></pre>"},{"location":"reference/kiara_plugin/onboarding/modules/files/import_file_bundle/#kiara_plugin.onboarding.modules.files.import_file_bundle.ImportFileBundleModule.create_outputs_schema","title":"<code>create_outputs_schema() -&gt; ValueMapSchema</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/kiara_plugin/onboarding/modules/files/import_file_bundle.py</code> <pre><code>def create_outputs_schema(\n    self,\n) -&gt; ValueMapSchema:\n\n    result = {\n        \"file_bundle\": {\n            \"type\": \"file_bundle\",\n            \"doc\": \"The imported file bundle.\",\n        }\n    }\n    if self.get_config_value(\"import_metadata\"):\n        result[\"import_metadata\"] = {\n            \"type\": \"dict\",\n            \"doc\": \"Metadata about the import and file bundle.\",\n        }\n    return result\n</code></pre>"},{"location":"reference/kiara_plugin/onboarding/modules/files/import_file_bundle/#kiara_plugin.onboarding.modules.files.import_file_bundle.ImportFileBundleModule.process","title":"<code>process(inputs: ValueMap, outputs: ValueMap) -&gt; None</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/kiara_plugin/onboarding/modules/files/import_file_bundle.py</code> <pre><code>def process(self, inputs: ValueMap, outputs: ValueMap) -&gt; None:\n    pass\n</code></pre>"},{"location":"reference/kiara_plugin/onboarding/pipelines/__init__/","title":"pipelines","text":"<p>Default (empty) module that is used as a base path for pipelines contained in this package.</p>"},{"location":"reference/kiara_plugin/onboarding/utils/__init__/","title":"utils","text":""},{"location":"reference/kiara_plugin/onboarding/utils/download/","title":"download","text":""},{"location":"reference/kiara_plugin/onboarding/utils/download/#kiara_plugin.onboarding.utils.download-functions","title":"Functions","text":""},{"location":"reference/kiara_plugin/onboarding/utils/download/#kiara_plugin.onboarding.utils.download.download_file","title":"<code>download_file(url: str, file_name: Union[str, None] = None) -&gt; Tuple[FileModel, Dict[str, Any]]</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/kiara_plugin/onboarding/utils/download.py</code> <pre><code>def download_file(\n    url: str, file_name: Union[str, None] = None\n) -&gt; Tuple[FileModel, Dict[str, Any]]:\n\n    tmp_file = tempfile.NamedTemporaryFile(delete=False)\n\n    history = []\n    datetime.utcnow().replace(tzinfo=pytz.utc)\n    with open(tmp_file.name, \"wb\") as f:\n        with httpx.stream(\"GET\", url, follow_redirects=True) as r:\n            history.append(dict(r.headers))\n            for h in r.history:\n                history.append(dict(h.headers))\n            for data in r.iter_bytes():\n                f.write(data)\n\n    if not file_name:\n        # TODO: make this smarter, using content-disposition headers if available\n        file_name = url.split(\"/\")[-1]\n\n    result_file = FileModel.load_file(tmp_file.name, file_name)\n\n    metadata = {\n        \"response_headers\": history,\n        \"request_time\": datetime.utcnow().replace(tzinfo=pytz.utc).isoformat(),\n    }\n    return result_file, metadata\n</code></pre>"}]}